package org.apache.solr.search.grouping.distributed.shardresultserializer;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.TopFieldDocs;
import org.apache.lucene.search.grouping.CollectedSearchGroup2;
import org.apache.lucene.search.grouping.GroupDocs;
import org.apache.lucene.search.grouping.SearchGroup;
import org.apache.lucene.search.grouping.TopGroups;
import org.apache.lucene.util.BytesRef;
import org.apache.solr.common.util.NamedList;
import org.apache.solr.handler.component.ResponseBuilder;
import org.apache.solr.schema.FieldType;
import org.apache.solr.schema.IndexSchema;
import org.apache.solr.schema.SchemaField;
import org.apache.solr.search.SolrIndexSearcher;
import org.apache.solr.search.grouping.Command;
import org.apache.solr.search.grouping.distributed.command.QueryCommandResult;
import org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommandResult;

public class TopGroups2ResultTransformer implements ShardResultTransformer<List<Command>, Map<String, SearchGroupsFieldCommandResult>> {{

  private final SolrIndexSearcher searcher;

  public SearchGroupsResultTransformer(SolrIndexSearcher searcher) {
    this.searcher = searcher;
  }

	ResponseBuilder rb;
  public TopGroups2ResultTransformer(ResponseBuilder rb){
		super(rb);
		this.rb = rb; 
	}
  
  /**
   * {@inheritDoc}
   */
  @Override
  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {
    Map<String, Object> result = new HashMap<>();

    final IndexSchema schema = rb.req.getSearcher().getSchema();

    NamedList<NamedList> topGroups = shardResponse.get(SearchGroups2ResultTransformer.TOP_GROUPS);
    for (Map.Entry<String, NamedList> entry : topGroups) {
    	CollectedSearchGroup2<BytesRef> searchGroup = new CollectedSearchGroup2<>();
      String key = entry.getKey();
      NamedList secondGroups = (NamedList)entry.getValue().get(SearchGroups2ResultTransformer.GROUPS);
      Integer totalHits = (Integer) entry.getValue().get(SearchGroups2ResultTransformer.GROUP_COUNT);
      if (totalHits != null) {
        Integer matches = (Integer) commandResult.get("matches");
        Float maxScore = (Float) commandResult.get("maxScore");
        if (maxScore == null) {
          maxScore = Float.NaN;
        }

        @SuppressWarnings("unchecked")
        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get("documents");
        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);
        final TopDocs topDocs;
        if (sortWithinGroup.equals(Sort.RELEVANCE)) {
          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);
        } else {
          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);
        }
        result.put(key, new QueryCommandResult(topDocs, matches));
        continue;
      }

      Integer totalHitCount = (Integer) commandResult.get("totalHitCount");
      commandResult = (NamedList)commandResult.get("topGroups");
      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();
      for (int i = 0; i < commandResult.size(); i++) {
        String groupValue = commandResult.getName(i);
        @SuppressWarnings("unchecked")
        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);
        for(int j = 0; j < groupResult.size(); j++) {
          String resValue = groupResult.getName(i);
          NamedList<Object> res = (NamedList<Object>) groupResult.getVal(i);
	        Integer totalGroupHits = (Integer) res.get("totalHits");
	        Float maxScore = (Float) res.get("maxScore");
	        if (maxScore == null) {
	          maxScore = Float.NaN;
	        }
	
	        @SuppressWarnings("unchecked")
	        List<NamedList<Object>> documents = (List<NamedList<Object>>) res.get("documents");
	        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, sortWithinGroup, shard, schema);
	
	        BytesRef groupValueRef = resValue != null ? new BytesRef(resValue) : null;
	        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));
	        
        }
      }

      @SuppressWarnings("unchecked")
      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);
      TopGroups<BytesRef> topGroupsX = new TopGroups<>(
           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN
      );

      result.put(key, topGroupsX);
    }

    return result;
  }
  
  /**
   * {@inheritDoc}
   */
//  @Override
  public Map<String, SearchGroupsFieldCommandResult> transformToNativex(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {
    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());
    
    NamedList<NamedList> topGroups = shardResponse.get(SearchGroups2ResultTransformer.TOP_GROUPS);
  	List<CollectedSearchGroup2<BytesRef>> searchGroups = new ArrayList<>();
    for (Map.Entry<String, NamedList> group : topGroups) {
    	Collection<CollectedSearchGroup2<BytesRef>> subGroups = new ArrayList<>();
      NamedList topGroupsAndGroupCount = group.getValue();
      @SuppressWarnings("unchecked")
      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(SearchGroups2ResultTransformer.GROUPS);
      if (rawSearchGroups != null) {
        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){
          CollectedSearchGroup2<BytesRef> searchGroup = new CollectedSearchGroup2()<>();
          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;
          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);
          for (int i = 0; i < searchGroup.sortValues.length; i++) {
            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;
            if (field != null) {
              FieldType fieldType = field.getType();
              if (searchGroup.sortValues[i] != null) {
                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);
              }
            }
          }
          subGroups.add(searchGroup);
        }
      }
      CollectedSearchGroup2<BytesRef> collectedGroup = new CollectedSearchGroup2<>();
      collectedGroup.groupValue= new BytesRef(group.getKey());
      collectedGroup.subGroups = subGroups;
      searchGroups.add(collectedGroup);

      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);
      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));
    }
    return result;
  }

}
