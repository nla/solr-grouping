<?xml version="1.0" encoding="UTF-8" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- This is the Solr schema file. This file should be named "schema.xml" 
	and should be in the conf directory under the solr home (i.e. ./solr/conf/schema.xml 
	by default) or located where the classloader for the Solr webapp can find 
	it. This example schema is the recommended starting point for users. It should 
	be kept correct and concise, usable out-of-the-box. For more information, 
	on how to customize this file, please see http://wiki.apache.org/solr/SchemaXml 
	PERFORMANCE NOTE: this schema includes many optional features and should 
	not be used for benchmarking. To improve performance one could - set stored="false" 
	for all fields possible (esp large fields) when you only need to search on 
	the field but don't need to return the original value. - set indexed="false" 
	if you don't need to search on the field, but only return the field as a 
	result of searching on other indexed fields. - remove all unneeded copyField 
	statements - for best index size and searching performance, set "index" to 
	false for all general text fields, use copyField to copy them to the catchall 
	"text" field, and use that for searching. - For maximum indexing performance, 
	use the StreamingUpdateSolrServer java client. - Remember to run the JVM 
	in server mode, and use a higher logging level that avoids logging every 
	request -->

<schema name="bibliographic" version="1.5">
	<!-- attribute "name" is the name of this schema and is only used for display 
		purposes. version="x.y" is Solr's version number for the schema syntax and 
		semantics. It should not normally be changed by applications. 1.0: multiValued 
		attribute did not exist, all fields are multiValued by nature 1.1: multiValued 
		attribute introduced, false by default 1.2: omitTermFreqAndPositions attribute 
		introduced, true by default except for text fields. 1.3: removed optional 
		field compress feature 1.4: default auto-phrase (QueryParser feature) to 
		off 1.5: omitNorms defaults to true for primitive field types (int, float, 
		boolean, string...) -->

	<fields>
		<!-- Valid attributes for fields: name: mandatory - the name for the field 
			type: mandatory - the name of a field type from the <types> fieldType section 
			indexed: true if this field should be indexed (searchable or sortable) stored: 
			true if this field should be retrievable multiValued: true if this field 
			may contain multiple values per document omitNorms: (expert) set to true 
			to omit the norms associated with this field (this disables length normalization 
			and index-time boosting for the field, and saves some memory). Only full-text 
			fields or fields that need an index-time boost need norms. Norms are omitted 
			for primitive (non-analyzed) types by default. termVectors: [false] set to 
			true to store the term vector for a given field. When using MoreLikeThis, 
			fields used for similarity should be stored for best performance. termPositions: 
			Store position information with the term vector. This will increase storage 
			costs. termOffsets: Store offset information with the term vector. This will 
			increase storage costs. required: The field is required. It will throw an 
			error if the value does not exist default: a value that should be used if 
			no value is specified when adding a document. -->

		<!-- field names should consist of alphanumeric or underscore characters 
			only and not start with a digit. This is not currently strictly enforced, 
			but other field names will not have first class support from all components 
			and back compatibility is not guaranteed. Names with both leading and trailing 
			underscores (e.g. _version_) are reserved. -->

		<!--  ::=  -->
		<!-- id ::= -->
		<field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		<!-- record ::= the full marcxml record as character encoded string -->
		<field name="record" type="string" indexed="false" stored="true" required="true" multiValued="false" />
		<!-- timestamp ::= date/time record indexed -->
		<field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false" />
		<!-- TDT ::= date/time record last modified in CBS -->
		<field name="TDT" type="date" indexed="true" stored="true" />
		<!-- _version_ ::= internal Solr version number -->
		<field name="_version_" type="long" indexed="true" stored="true" />
		
		<!-- AN ::= ANBD No. -->
		<field name="AN" type="string_id" indexed="true" stored="true" required="true" />
		<!-- ACN ::= Linked Authority Control No. -->
		<field name="ACN" type="string_id" indexed="true" stored="false" required="false" multiValued="true" />
		<!-- PPN ::= PICA Production No. -->
		<field name="PPN" type="string_id" indexed="true" stored="false" required="false" />
		<!-- XN ::= Immutable No. -->
		<field name="XN" type="string_id" indexed="true" stored="false" required="false" multiValued="true" />
		<!-- NA ::= Name -->
		<field name="NA" type="text_la" indexed="true" stored="true" multiValued="true" />
		<!-- SU ::= Subject Heading  -->
		<field name="SU" type="text_la" indexed="true" stored="true" multiValued="true" />		
		<!-- TI ::= Title -->
		<field name="TI" type="text_la" indexed="true" stored="true" multiValued="true" />
		<!-- DC ::= Dewey Classification Number -->
		<field name="DC" type="text_dewey" indexed="true" stored="true" multiValued="true" />
		
		<!-- uncomment the following to ignore any fields that don't already match 
			an existing field name or dynamic field, rather than reporting them as an 
			error. alternately, change the type="ignored" to some other type e.g. "text" 
			if you want unknown fields indexed and/or stored by default -->
		<dynamicField name="*_sort"  type="text_exact" indexed="true" stored="false" multiValued="false" />
		<dynamicField name="*_exact" type="text_exact" indexed="true" stored="false" multiValued="true" />
		<dynamicField name="*_dewey" type="text_dewey" indexed="true" stored="false" multiValued="true" />
		<dynamicField name="*"       type="text_la"    indexed="true" stored="false" multiValued="true" />

	</fields>


	<!-- Field to use to determine and enforce document uniqueness. Unless this 
		field is marked with required="false", it will be a required field -->
	<uniqueKey>id</uniqueKey>

	<!-- DEPRECATED: The defaultSearchField is consulted by various query parsers 
		when parsing a query string that isn't explicit about the field. Machine 
		(non-user) generated queries are best made explicit, or they can use the 
		"df" request parameter which takes precedence over this. Note: Un-commenting 
		defaultSearchField will be insufficient if your request handler in solrconfig.xml 
		defines "df", which takes precedence. That would need to be removed. <defaultSearchField>text</defaultSearchField> -->

	<!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various query 
		parsers when parsing a query string to determine if a clause of the query 
		should be marked as required or optional, assuming the clause isn't already 
		marked by some operator. The default is OR, which is generally assumed so 
		it is not a good idea to change it globally here. The "q.op" request parameter 
		takes precedence over this. <solrQueryParser defaultOperator="OR"/> -->

	<!-- copyField commands copy one field to another at the time a document 
		is added to the index. It's used either to index the same field differently, 
		or to add multiple fields to the same field for easier/faster searching. -->
	<!-- copyField source="id" dest="text" / -->

	<!-- Above, multiple source fields are copied to the [text] field. Another 
		way to map multiple source fields to the same destination field is to use 
		the dynamic field syntax. copyField also supports a maxChars to copy setting. -->

	<!-- <copyField source="*_t" dest="text" maxChars="3000"/> -->

	<!-- Similarity is the scoring routine for each document vs. a query. A 
		custom similarity may be specified here, but the default is fine for most 
		applications. -->
	<!-- <similarity class="org.apache.lucene.search.similarities.DefaultSimilarity"/> -->
	<!-- ... OR ... Specify a SimilarityFactory class name implementation allowing 
		parameters to be used. -->
	<!-- <similarity class="com.example.solr.CustomSimilarityFactory"> <str 
		name="paramkey">param value</str> </similarity> -->



	<types>
	
		<!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
		<fieldType name="string_id" class="solr.TextField" sortMissingLast="true">
			<analyzer>
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^0+" replacement="" />
				<tokenizer class="solr.KeywordTokenizerFactory" />
			</analyzer>
		</fieldType>
	
		<!-- A general text field that has reasonable, generic cross-language defaults: 
			it tokenizes with StandardTokenizer, removes stop words from case-insensitive 
			"stopwords.txt" (empty by default), and down cases. At query time only, it 
			also applies synonyms. -->
		<fieldType name="text_la" class="solr.TextField" positionIncrementGap="1000">
			<analyzer type="index">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="['\[\]|\u02B9\u00B7\u02BE\u02BB\u02BA\p{Mn}\p{Me}]" replacement="" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d)(,|-)(\d)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\.|/" replacement=" " />
				<tokenizer class="au.gov.nla.lucene.analysis.standard.jflex.StandardTokenizerFactory" />
				<filter class="au.gov.nla.lucene.analysis.DiacriticFilterFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="au.gov.nla.lucene.analysis.StartsWithFilterFactory" startsWithMarker="&#xFFFD;" positionIncrementGap="900" />
			</analyzer>
			<analyzer type="query">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="['\[\]|\u02B9\u00B7\u02BE\u02BB\u02BA\p{Mn}\p{Me}]" replacement="" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d)(,|-)(\d)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\.|/" replacement=" " />
				<tokenizer class="au.gov.nla.lucene.analysis.standard.jflex.StandardTokenizerFactory" />
				<filter class="au.gov.nla.lucene.analysis.DiacriticFilterFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>
		
		<!-- A general text field that handles dewey identifiers -->
		<fieldType name="text_dewey" class="solr.TextField" positionIncrementGap="1000">
			<analyzer type="index">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d)(\/|\.)+(\d)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\w)(\/|\.)+(\w)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d)(,|-)(\d)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\w)(,|-)(\w)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\.|-" replacement="" />
				<tokenizer class="au.gov.nla.lucene.analysis.standard.jflex.StandardTokenizerFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d)(\/|\.)+(\d)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\w)(\/|\.)+(\w)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d)(,|-)(\d)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\w)(,|-)(\w)" replacement="$1$3" />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\.|-" replacement="" />
				<tokenizer class="au.gov.nla.lucene.analysis.standard.jflex.StandardTokenizerFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>
		
		<!-- A general text field that has reasonable, generic cross-language defaults: 
			it tokenizes with StandardTokenizer, removes stop words from case-insensitive 
			"stopwords.txt" (empty by default), and down cases. At query time only, it 
			also applies synonyms. -->
		<fieldType name="text_exact" class="solr.TextField" positionIncrementGap="1000" sortMissingLast="true">
 			<analyzer type="index">
 				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[,-\.\/]" replacement=" " />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="['\[\]\|\u02B9\u00B7\u02BE\u02BB\u02BA]" replacement="" />
				<tokenizer class="au.gov.nla.lucene.analysis.PhraseTokenizerFactory" />
 				<filter class="au.gov.nla.lucene.analysis.DiacriticFilterFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
			<analyzer type="query">
 				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[,-\.\/]" replacement=" " />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="['\[\]\|\u02B9\u00B7\u02BE\u02BB\u02BA]" replacement="" />
				<tokenizer class="au.gov.nla.lucene.analysis.PhraseTokenizerFactory" />
 				<filter class="au.gov.nla.lucene.analysis.DiacriticFilterFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>
		
		<!-- A general text field that has reasonable, generic cross-language defaults: 
			it tokenizes with StandardTokenizer, removes stop words from case-insensitive 
			"stopwords.txt" (empty by default), and down cases. At query time only, it 
			also applies synonyms. -->
		<!-- disabled because it doesn't work properly
		<fieldType name="text_sort" class="au.gov.nla.solr.schema.DocValuesTextField">
 			<analyzer type="index">
 				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[,-\.\/]" replacement=" " />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="['\[\]\|\u02B9\u00B7\u02BE\u02BB\u02BA]" replacement="" />
				<tokenizer class="au.gov.nla.lucene.analysis.PhraseTokenizerFactory" />
 				<filter class="au.gov.nla.lucene.analysis.DiacriticFilterFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
			<analyzer type="query">
 				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[,-\.\/]" replacement=" " />
				<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="['\[\]\|\u02B9\u00B7\u02BE\u02BB\u02BA]" replacement="" />
				<tokenizer class="au.gov.nla.lucene.analysis.PhraseTokenizerFactory" />
 				<filter class="au.gov.nla.lucene.analysis.DiacriticFilterFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>
		-->

		<!-- field type definitions. The "name" attribute is just a label to be 
			used by field definitions. The "class" attribute and any other attributes 
			determine the real behavior of the fieldType. Class names starting with "solr" 
			refer to java classes in a standard package such as org.apache.solr.analysis -->

		<!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
		<fieldType name="string" class="solr.StrField" sortMissingLast="true" />

		<!-- boolean type: "true" or "false" -->
		<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" />

		<!-- sortMissingLast and sortMissingFirst attributes are optional attributes 
			are currently supported on types that are sorted internally as strings and 
			on numeric types. This includes "string","boolean", and, as of 3.5 (and 4.x), 
			int, float, long, date, double, including the "Trie" variants. - If sortMissingLast="true", 
			then a sort on this field will cause documents without the field to come 
			after documents with the field, regardless of the requested sort order (asc 
			or desc). - If sortMissingFirst="true", then a sort on this field will cause 
			documents without the field to come before documents with the field, regardless 
			of the requested sort order. - If sortMissingLast="false" and sortMissingFirst="false" 
			(the default), then default lucene sorting will be used which places docs 
			without the field first in an ascending sort and last in a descending sort. -->

		<!-- Default numeric field types. For faster range queries, consider the 
			tint/tfloat/tlong/tdouble types. -->
		<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0" />
		<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0" />
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0" />
		<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0" />

		<!-- Numeric field types that index each value at various levels of precision 
			to accelerate range queries when the number of values between the range endpoints 
			is large. See the javadoc for NumericRangeQuery for internal implementation 
			details. Smaller precisionStep values (specified in bits) will lead to more 
			tokens indexed per value, slightly larger index size, and faster range queries. 
			A precisionStep of 0 disables indexing at different precision levels. -->
		<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0" />

		<!-- The format for this date field is of the form 1995-12-31T23:59:59Z, 
			and is a more restricted form of the canonical representation of dateTime 
			http://www.w3.org/TR/xmlschema-2/#dateTime The trailing "Z" designates UTC 
			time and is mandatory. Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z 
			All other components are mandatory. Expressions can also be used to denote 
			calculations that should be performed relative to "NOW" to determine the 
			value, ie... NOW/HOUR ... Round to the start of the current hour NOW-1DAY 
			... Exactly 1 day prior to now NOW/DAY+6MONTHS+3DAYS ... 6 months and 3 days 
			in the future from the start of the current day Consult the DateField javadocs 
			for more information. Note: For faster range queries, consider the tdate 
			type -->
		<fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0" />

		<!-- A Trie based date field for faster date range queries and date faceting. -->
		<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0" />


		<!--Binary data type. The data should be sent/retrieved in as Base64 encoded 
			Strings -->
		<fieldtype name="binary" class="solr.BinaryField" />

		<!-- The "RandomSortField" is not used to store or search any data. You 
			can declare fields of this type it in your schema to generate pseudo-random 
			orderings of your docs for sorting or function purposes. The ordering is 
			generated based on the field name and the version of the index. As long as 
			the index version remains unchanged, and the same field name is reused, the 
			ordering of the docs will be consistent. If you want different psuedo-random 
			orderings of documents, for the same version of the index, use a dynamicField 
			and change the field name in the request. -->
		<fieldType name="random" class="solr.RandomSortField" indexed="true" />

		<!-- solr.TextField allows the specification of custom text analyzers specified 
			as a tokenizer and a list of token filters. Different analyzers may be specified 
			for indexing and querying. The optional positionIncrementGap puts space between 
			multiple fields of this type on the same document, with the purpose of preventing 
			false phrase matching across fields. For more info on customizing your analyzer 
			chain, please see http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters -->

		<!-- One can also specify an existing Analyzer class that has a default 
			constructor via the class attribute on the analyzer element. Example: <fieldType 
			name="text_greek" class="solr.TextField"> <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/> 
			</fieldType> -->

		<!-- A text field that only splits on whitespace for exact matching of 
			words -->
		<fieldType name="text_ws" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
			</analyzer>
		</fieldType>

		<!-- since fields of this type are by default not stored or indexed, any 
			data added to them will be ignored outright. -->
		<fieldtype name="ignored" stored="false" indexed="false"
			multiValued="true" class="solr.StrField" />

	</types>

</schema>
